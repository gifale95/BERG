# Template YAML file for NEST model specification
# Replace placeholder values with actual model information

# Basic metadata
model_id: modality-dataset-model_type  # e.g., fmri-nsd-fwrf
modality: modality  # e.g., fmri, eeg, meg, ...
training_dataset: dataset_name
species: Human  # e.g., Human, Macaque, etc.
stimuli: Images  # e.g., Images, Sounds, Text, etc.
model_architecture: feature_extraction_method  # e.g., ViT-B/32, fwRF, etc.
creator: your_name

# General description of the model
description: |
  Provide a concise but informative description of the model, including:
   - What kind of neural responses it generates
   - What dataset it was trained on
   - The basic approach/architecture
   - Any notable characteristics or limitations
   Keep this to 3-5 sentences for readability.

# Input stimulus information
input:
  type: "numpy.ndarray"  # or other appropriate type
  shape: [shape_description]  # e.g., [batch_size, 3, height, width]
  description: "Brief description of input format"
  constraints:
    - "List any constraints on input values"
    - "e.g., value ranges, size requirements, etc."

# Output information
output:
  type: "numpy.ndarray"  # or other appropriate type
  shape: [shape_description]  # e.g., [batch_size, n_voxels]
  description: "Brief description of output format"
  dimensions:
    - name: "dimension_name]"
      description: "What this dimension represents"
    - name: "dimension_name"
      description: "What this dimension represents"
    # Add more dimensions as needed

# Model parameters and their usage
parameters:
  # First parameter
  param_name:
    type: param_type  # e.g., int, str, float
    required: true/false
    valid_values: list_of_valid_values  # or range, or omit if not applicable
    default: default_value  # include if there's a default value
    example: example_value
    description: "Description of what this parameter represents"
    function: "Which function uses this parameter: get_encoding_model, load_model, .."

  # Selection parameter to define specific outputs (ROI, channels, timepoints, etc.)
  selection:
    type: dict
    required: true
    description: |
      Specifies which outputs to include in the model responses.
      This parameter defines for which data the in silico responses should be generated 
      (e.g., specific ROI, timepoints, channels, etc.)
    function: get_encoding_model
    properties:
      key_name:  # Replace with model-specific keys, e.g., "roi", "channels", "timepoints"
        type: any
        description: "Description of Model-specific selection criterion."
        example: "V1"

  # Add more parameters as needed
  param_name:
    type: param_type
    required: true/false
    valid_values: list_of_valid_values  # or range, or omit if not applicable
    default: default_value  # include if there's a default value
    example: example_value
    description: "Description of what this parameter represents"
    function: "Which function uses this parameter"

# Performance metrics (if needed) and references
performance:
  metrics:
    - name: "metric_name"
      value: "metric_value"
      description: "What this metric represents"
    
    # Add more metrics as needed
    - name: "metric_name"
      value: "metric_value"
      description: "What this metric represents"
  
  plots: "URL_to_performance_plots"  # URL or path to visualizations

# Add References here
references:
    - "Citation for your model or dataset"